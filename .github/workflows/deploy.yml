name: Deploy Spring Boot App to EC2 + Update ASG

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Prepare directory on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/app
            sudo chown -R ubuntu:ubuntu /home/ubuntu/app

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/ubuntu/app/"
          overwrite: true

      - name: Rename JAR and restart Spring Boot service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ls /home/ubuntu/app/*.jar 1> /dev/null 2>&1; then
              mv /home/ubuntu/app/*.jar /home/ubuntu/app/app.jar || true
            fi
            sudo systemctl daemon-reload
            sudo systemctl restart myapp
            sleep 5
            sudo systemctl status myapp --no-pager

  update-ami-and-asg:
    name: Create new AMI and refresh Auto Scaling Group
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Find running instance in ASG
        id: find-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:autoscaling:groupName,Values=myAutoScaling" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Using instance: $INSTANCE_ID"

      - name: Create new AMI
        id: create-ami
        run: |
          AMI_ID=$(aws ec2 create-image \
            --instance-id ${{ env.INSTANCE_ID }} \
            --name "springboot-ami-$(date +%Y%m%d%H%M)" \
            --description "AMI created from latest deployment" \
            --no-reboot \
            --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "Created AMI: $AMI_ID"

      - name: Wait for AMI to become available
        run: |
          aws ec2 wait image-available --image-ids ${{ env.AMI_ID }}
          echo "AMI ${{ env.AMI_ID }} is ready"

      - name: Update Launch Template with new AMI
        run: |
          TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --launch-template-names spring-template \
            --query 'LaunchTemplates[0].LaunchTemplateId' \
            --output text)
          VERSION_ID=$(aws ec2 create-launch-template-version \
            --launch-template-id $TEMPLATE_ID \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "New Launch Template version: $VERSION_ID"
          aws ec2 modify-launch-template \
            --launch-template-id $TEMPLATE_ID \
            --default-version $VERSION_ID
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name myAutoScaling \
          --launch-template "LaunchTemplateName=spring-template,Version=$VERSION_ID"


      - name: Start ASG instance refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name myAutoScaling \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 120}'
          echo "Triggered instance refresh for myAutoScaling"
