name: Deploy Spring Boot App to EC2 + Update ASG

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Verify built JAR
        run: ls -lh target/

      - name: Prepare directory on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/app
            sudo chown -R ubuntu:ubuntu /home/ubuntu/app

      - name: Verify EC2 app directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Checking /home/ubuntu/app directory on EC2..."
            ls -ld /home/ubuntu/app || echo "❌ Directory does not exist!"
            echo
            echo "Current contents (if any):"
            ls -lh /home/ubuntu/app || echo "No files yet."
            echo
            echo "Directory owner and permissions:"
            ls -ld /home/ubuntu/app

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/ubuntu/app/"
          overwrite: true

      - name: Verify uploaded JAR on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Checking for newly uploaded JAR on EC2 ==="
            ls -lh /home/ubuntu/app/*.jar || echo "❌ No JARs found in /home/ubuntu/app"
            echo
            echo "Most recent JAR file:"
            ls -lt /home/ubuntu/app/*.jar | head -n1
            echo
            echo "Verifying timestamp and size:"
            stat -c '%n | %y | %s bytes' /home/ubuntu/app/*.jar


#      - name: Rename, symlink, and restart Spring Boot service
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            # Get the newest JAR from the upload
#            NEW_JAR=$(ls -t /home/ubuntu/app/*.jar | head -n1)
#
#            # Create a versioned filename based on timestamp
#            TIMESTAMP=$(date +%Y%m%d%H%M%S)
#            VERSIONED_JAR="/home/ubuntu/app/app-$TIMESTAMP.jar"
#
#            # Move the new JAR to the versioned filename
#            mv -f "$NEW_JAR" "$VERSIONED_JAR"
#
#            # Update symlink to point to the latest version
#            ln -sf "$VERSIONED_JAR" /home/ubuntu/app/app.jar
#
#            # Restart the service
#            sudo systemctl restart myapp
#
#            # Optional: wait a few seconds and check status
#            sleep 5
#            sudo systemctl status myapp --no-pager


#  update-ami-and-asg:
#    name: Create new AMI and refresh Auto Scaling Group
#    needs: deploy
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Use EC2 instance that was just deployed to
#        run: echo "INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}" >> $GITHUB_ENV
#
#      - name: Create new AMI
#        id: create-ami
#        run: |
#          AMI_ID=$(aws ec2 create-image \
#            --instance-id ${{ env.INSTANCE_ID }} \
#            --name "springboot-ami-$(date +%Y%m%d%H%M)" \
#            --description "AMI created from latest deployment" \
#            --no-reboot \
#            --output text)
#          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
#          echo "Created AMI: $AMI_ID"
#
#      - name: Wait for AMI to become available
#        run: |
#          aws ec2 wait image-available --image-ids ${{ env.AMI_ID }}
#          echo "AMI ${{ env.AMI_ID }} is ready"
#
#      - name: Update Launch Template with new AMI
#        run: |
#          TEMPLATE_ID=$(aws ec2 describe-launch-templates \
#            --launch-template-names spring-template \
#            --query 'LaunchTemplates[0].LaunchTemplateId' \
#            --output text)
#          VERSION_ID=$(aws ec2 create-launch-template-version \
#            --launch-template-id $TEMPLATE_ID \
#            --source-version 1 \
#            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
#            --query 'LaunchTemplateVersion.VersionNumber' \
#            --output text)
#          echo "New Launch Template version: $VERSION_ID"
#          aws ec2 modify-launch-template \
#            --launch-template-id $TEMPLATE_ID \
#            --default-version $VERSION_ID
#          aws autoscaling update-auto-scaling-group \
#          --auto-scaling-group-name myAutoScaling \
#          --launch-template "LaunchTemplateName=spring-template,Version=$VERSION_ID"
#
#
#      - name: Start ASG instance refresh
#        run: |
#          aws autoscaling start-instance-refresh \
#            --auto-scaling-group-name myAutoScaling \
#            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 120}'
#          echo "Triggered instance refresh for myAutoScaling"
